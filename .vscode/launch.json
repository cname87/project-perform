{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    // Mocha server
    {
      "type": "node",
      "request": "launch",
      "name": "Mocha Server Tests",
      "program": "${workspaceFolder}/backend/node_modules/mocha/bin/_mocha",
      "args": [
        "--config", "${workspaceFolder}/backend/.mocharc.json",
        "${workspaceFolder}/backend/server/test/*.js",
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true"
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/node_modules/**/*.*",
        "<node_internals>/**/*.*",
      ],
      "autoAttachChildProcesses": true,
      "preLaunchTask": "Taskkill node.exe", // kill any previously failed node runs
    },
    // Mocha server with Istanbul coverage
    {
      "type": "node",
      "request": "launch",
      "name": "Mocha Server with Istanbul Tests",
      "program": "${workspaceFolder}/backend/node_modules/nyc/bin/nyc",
      "args": [
        "--reporter=text",
        "--reporter=html",
        "--report-dir", "${workspaceFolder}/backend/coverage",
        "${workspaceFolder}/backend/node_modules/mocha/bin/_mocha",
        "--config", "${workspaceFolder}/backend/.mocharc.json",
        "${workspaceFolder}/backend/server/test/*.js",
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true",
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/backend/node_modules/**/*.*",
        "<node_internals>/**/*.*",
      ],
      "autoAttachChildProcesses": true,
      "preLaunchTask": "Taskkill node.exe", // kill any previously failed node runs
    },
    // Mocha Backend debug using .js
    {
    "type": "node",
    "request": "launch",
    "name": "Mocha Test",
    "program": "${workspaceFolder}/backend/node_modules/mocha/bin/_mocha",
    "args": [
      "--config", "${workspaceFolder}/backend/.mocharc.json",
      "${workspaceFolder}/backend/dist/models/test/models.test.js",
    ],
    "env": {
      "NODE_ENV": "development",
      "DEBUG": "MM* PP* SY*", // comment out to remove debug output
      "DEBUG_COLORS": "true"
    },
    "outputCapture": "std",
    "console": "integratedTerminal", // allows you use CTRL+C to exit
    "internalConsoleOptions": "neverOpen",
    "skipFiles": [
      "<node_internals>/**/*.js",
      "${workspaceFolder}/backend/node_modules/**/*",
      "${workspaceFolder}/backend/node_modules/**/*.js",
    ],
    "autoAttachChildProcesses": true,
    "preLaunchTask": "Taskkill node.exe", // kill any previously failed node runs
  },
    // Mocha Backend debug .test.ts
    {
      /**
      If debug is required: 
      Target a specific xxx.test.ts file (rather than run all) and use stopOnEntry.
      May stop spuriously on a node VMxx file - cannot be addressed via skipFiles.
      'Step Into' the test file if stopped on a VMxxx file.
      */ 
      "type": "node",
      "request": "launch",
      "name": "Mocha Backend *.test.ts Tests",
      "protocol": "inspector",
      "stopOnEntry": true,
      "runtimeExecutable":  "${workspaceFolder}/backend/node_modules/node/bin/node",
      "args": [
        "${workspaceFolder}/backend/node_modules/mocha/bin/_mocha",
        "--require", "ts-node/register",
        "--require", "source-map-support/register",
        "--config", "${workspaceFolder}/backend/.mocharc.json",
        // "${workspaceFolder}/backend/xxx/test/xxx.test.ts"
        "${workspaceFolder}/backend/models/test/models.test.ts",
      ],
      "outFiles": [
        "${workspaceFolder}/backend/dist/**/src/*.js",
      ],
      "cwd": "${workspaceFolder}/backend/",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true",
        // You have to use environment variables to set ts-node options */
        "TS_NODE_PROJECT": "${workspaceFolder}/backend/tsconfig.json",
        "TS_NODE_FILES": "true", // include to avoid compile errors
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/backend/node_modules/**/*",
        "${workspaceFolder}/backend/node_modules/**/*.js",

      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "smartStep": true,
    },
    // Mocha Backend *.test.ts with Istanbul coverage
    {
      "type": "node",
      "request": "launch",
      "name": "Mocha Backend *.test.ts with Istanbul coverage",
      "protocol": "inspector",
      "runtimeExecutable":  "${workspaceFolder}/backend/node_modules/node/bin/node",
      "args": [
        "${workspaceFolder}/backend/node_modules/nyc/bin/nyc",
        "${workspaceFolder}/backend/node_modules/mocha/bin/_mocha",
        "--require", "ts-node/register/",
        "--require", "source-map-support/register",
        "--config", "${workspaceFolder}/backend/.mocharc.json",
        "${workspaceFolder}/backend/**/test/*.test.ts",
      ],
      "outFiles": [
        "${workspaceFolder}/backend/dist/**/src/*.js"
      ],
      "cwd": "${workspaceFolder}/backend/",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true",
        // You have to use environment variables to set ts-node options */
        "TS_NODE_PROJECT": "${workspaceFolder}/backend/tsconfig.json",
        "TS_NODE_FILES": "true", // include to avoid compile errors
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "<node_internals>/**/*.js",
        "${workspaceFolder}/backend/node_modules/**/*",
        "${workspaceFolder}/backend/node_modules/**/*.js",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "smartStep": false,
    },    
    // Current .js file
    {
      "type": "node",
      "request": "launch",
      "name": "Launch the currently opened .js file",
      "program": "${file}",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true"
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/backend/node_modules/**/*.*",
        "<node_internals>/**/*.*",
      ],
      "autoAttachChildProcesses": true,
    },
    // server index.js
    {
      "type": "node",
      "request": "launch",
      "name": "Launch server index.js",
      "protocol": "inspector",
      "program": "${workspaceFolder}/backend/server/src/index.ts",
      "cwd":  "${workspaceFolder}/backend",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true"
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/backend/node_modules/**/*.*",
        "<node_internals>/**/*.*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "outFiles": [
        "${workspaceFolder}/backend/dist/**/*.js",
      ],
      "smartStep": false,
    },
    // server index.ts (via ts-node)
    {
      "type": "node",
      "request": "launch",
      "name": "Launch server index.ts (via ts-node)",
      "runtimeExecutable": "node",
      "runtimeArgs": [
        "--require", "ts-node/register",
        "--require", "source-map-support/register",
      ],
      "cwd": "${workspaceFolder}/backend/server",
      "args": [
        "${workspaceFolder}/backend/server/src/index.ts"
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true",
        // You have to use environment variables to set ts-node options */
        "TS_NODE_PROJECT": "${workspaceFolder}/backend/tsconfig.json",
        "TS_NODE_FILES": "true", // include to avoid compile errors
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/backend/node_modules/**/*.*",
        "<node_internals>/**/*.*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
    },
    // monitor.js
    {
      "type": "node",
      "request": "launch",
      "name": "Launch monitor.js",
      "program": "${workspaceFolder}/backend/server/src/monitor/monitor.ts",
      "cwd":  "${workspaceFolder}/backend",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true"
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/backend/node_modules/**/*.*",
        "<node_internals>/**/*.*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "outFiles": [
        "${workspaceFolder}/backend/dist/**/*.js",
      ],
      "smartStep": false,
    },
    // monitor.ts (via ts-node)
    {
      "type": "node",
      "request": "launch",
      "name": "Launch monitor.ts (via ts-node)",
      "runtimeExecutable": "node",
      "runtimeArgs": [
        "--require", "ts-node/register",
        "--require", "source-map-support/register",
      ],
      "cwd": "${workspaceFolder}/backend/server",
      "args": [
        "${workspaceFolder}/backend/server/src/monitor/monitor.ts"
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true",
        // You have to use environment variables to set ts-node options */
        "TS_NODE_PROJECT": "${workspaceFolder}/backend/tsconfig.json",
        "TS_NODE_FILES": "true", // include to avoid compile errors
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/backend/node_modules/**/*.*",
        "<node_internals>/**/*.*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "smartStep": false,  // false as it may skip some ts files
    },
    // database index.js
    {
      "type": "node",
      "request": "launch",
      "name": "Launch database index.js",
      "protocol": "inspector",
      "program": "${workspaceFolder}/backend/database/src/index.ts",
      "cwd":  "${workspaceFolder}/backend",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true",
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/backend/node_modules/**/*.*",
        "<node_internals>/**/*.*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "outFiles": [
        "${workspaceFolder}/backend/dist/**/*.js",
      ],
      "smartStep": false,
    },
    // database index.ts (via ts-node)
    {
      "type": "node",
      "request": "launch",
      "name": "Launch database index.ts (via ts-node)",
      "protocol": "inspector",
      "runtimeExecutable":  "${workspaceFolder}/backend/node_modules/node/bin/node",
      "runtimeArgs": [
        "--require", "ts-node/register",
        "--require", "source-map-support/register",
      ],
      "args": [
        "${workspaceFolder}/backend/database/src/index.ts"
      ],
      "cwd":  "${workspaceFolder}/backend/database",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true",
        // You have to use environment variables to set ts-node options */
        "TS_NODE_PROJECT": "${workspaceFolder}/backend/tsconfig.json",
        "TS_NODE_FILES": "true", // include to avoid compile errors
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/backend/node_modules/**/*.*",
        "<node_internals>/**/*.*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "smartStep": false,  // false as it may skip some ts files
    },
    // NPM index.js
    {
      /* Runs an npm script to start index.js.
      * Note that CTRL+C does not exit without manual intervention.
      * Click on the VSCode 'stop' icon to exit without manual intervention */
      "type": "node",
      "request": "launch",
      "name": "NPM index.js",
      "cwd": "${workspaceFolder}/backend",
      "runtimeExecutable": "npm",
      "runtimeArgs": [
        "run-script",
        "debug",
        "--silent"
      ],
      "port": 9229,
      "outFiles": [
        "${workspaceFolder}/backend/dist/**/*.js"
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true"
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/backend/node_modules/**/*.*",
        "<node_internals>/**/*.*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
    },
    // localhost
    {
      // starts Chrome and connect to the home page
      // the server must be started in advance of running this
      "name": "Launch https://localhost:1337/",
      "type": "chrome",
      "request": "launch",
      "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
      "runtimeArgs": [
        "--remote-debugging-port=9222",
        "--incognito",
        "--start-maximized",
        "--new-window",
        "--disable-popup-blocking", // necessary for window.open() to work
      ],
      "userDataDir": true,
      "url": "https://localhost:1337/",
      "webRoot": "${workspaceFolder}/app-test-angular/dist/angular-tour-of-heroes",
      // tell vscode where to find scripts on the server
      "pathMapping": {
        "/": "${workspaceFolder}/app-test-angular/dist/angular-tour-of-heroes",
        "/testServer": "${workspaceFolder}/backend/server/test/client/browser",
      },
      "sourceMapPathOverrides": {
        "webpack:///./*": "${workspaceFolder}/app-test-angular/*",
      },
      "smartStep": true,
      "disableNetworkCache": true,
      "showAsyncStacks": true,
      "sourceMaps": true,
      "preLaunchTask": "Is Server Up?", // must delay to allow server start for use in compounds
      "trace": true,
    },
    // Client-fired server tests
    {
      /* This runs the server-side mocha client test file to test the server-side behaviour during client-side fired tests. */
      /* It expects the browser client to run a series of matching client-side tests. */
      /* If not commented out in the js fle it kicks off the browser tests.  Otherwise you can run the browser-side tests below, (or load loadmocha.html manually). */
      "type": "node",
      "request": "launch",
      "name": "Mocha Client Tests",
      "program": "${workspaceFolder}/backend/node_modules/mocha/bin/_mocha",
      "args": [
        // mocha options
        "--recursive",
        "--timeout", "0",
        "--colors",
        "${workspaceFolder}/backend/server/test/client-test.js",
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true",
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/backend/node_modules/**/*.*",
        "<node_internals>/**/*.*",
      ],
      "autoAttachChildProcesses": true,
      // "preLaunchTask": "Taskkill node.exe", // can't use in compound calls
    },
    // Client-fired server tests with Istanbul
    {
      /* This runs the server-side mocha client test file and istanbul coverage to test the server-side behaviour during client-side tests. */
      /* It expects the browser client to run a series of matching client-side tests. */
      /* If not commented out in the js fle it kicks off the browser tests. */
      "type": "node",
      "request": "launch",
      "name": "Mocha Client Tests with Istanbul",
      "program": "${workspaceFolder}/backend/node_modules/nyc/bin/nyc",
      "args": [
        "--reporter=text",
        "--reporter=html",
        "--report-dir",
        "./backend/coverage/client",
        "${workspaceFolder}/backend/node_modules/mocha/bin/_mocha",
        // mocha options
        "--recursive",
        "--timeout", "0",
        "--colors",
        "${workspaceFolder}/backend/server/test/client-test.js",
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true",
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/backend/node_modules/**/*.*",
        "<node_internals>/**/*.*",
      ],
      "autoAttachChildProcesses": true,
      // "preLaunchTask": "Taskkill node.exe", // can't use in compound calls
    },
    // Browser-side tests - obsolete
    {
      /* This runs client-side tests from Chrome, i.e. it loads loadmocha.html
       * which calls client-side tests.
       * The server must be started in advance of running this.
       * The mocha server-side test must be run in advance of this or otherwise some test will cause the server to crash and the remaining tests will fail. */
      /* NOTE: Not needed or usable if client-fired test file calls Chrome */
      /* 28-Feb-19: client-fired test file calls Chrome */
      "name": "Mocha Browser Tests - Obsolete",
      "type": "chrome",
      "request": "launch",
      "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
      "runtimeArgs": [
        "--incognito", // clear cache
        "--start-maximized",
        "--new-window",
        "--disable-popup-blocking", // necessary for window.open() to work
      ],
      "userDataDir": true,
      "url": "https://localhost:1337/testServer/loadmocha.html",
      // tell vscode where to find scripts on the server
      "pathMapping": {
        "/": "${workspaceFolder}/app-test-angular/dist/angular-tour-of-heroes",
        "/testServer": "${workspaceFolder}/server/test/client/browser",
      },
      /* use .scripts in debug console to check */
      "sourceMapPathOverrides": {
        "webpack:///./*": "${workspaceFolder}/app-test-angular/*",
      },
      "smartStep": true,
      "disableNetworkCache": true,
      "showAsyncStacks": true,
      "sourceMaps": true,
      "preLaunchTask": "Is Server Up?", // must delay to allow server start for use in compounds
    },
  ],
  "compounds": [
    // Server client-fired and browser-side tests together
    {
      /* NOTE: Not needed or usable if client-fired test file calls Chrome */
      /* 28-Feb-19: client-fired test file calls Chrome */
      /* This runs the server-side client test (which expects a client browser to fire the tests), and then calls Chrome to run the clent-side tests.
      * A task in the Moncha Browser Tests configuraton checks the server is up before running the client-side browser tests */
      "name": "Mocha Client and Browser",
      "configurations": [
          "Mocha Client Tests",
          "Mocha Browser Tests - Obsolete",
        ]
    }
],
}
