{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [

    // Mocha server
    {
      "type": "node",
      "request": "launch",
      "name": "Mocha Server Tests",
      "program": "${workspaceFolder}/server/node_modules/mocha/bin/_mocha",
      "args": [
        "--recursive",
        "--timeout", "0",
        "--colors",
        "--check-leaks",
        "--globals", "__core-js_shared__, argsIn, __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault",
        // argsIn: windows-service-controller has an undefined variable.  (I fixed in my files).
        // __core-js_shared__: When browser opens a pug page during client tests.
        // Others introduced with typescript etc (?).
        "${workspaceFolder}/server/test/*.js",
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true"
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/server/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
      "preLaunchTask": "Taskkill node.exe", // kill any previously failed node runs
    },
    // Mocha server with Istanbul coverage
    {
      "type": "node",
      "request": "launch",
      "name": "Mocha Server with Istanbul Tests",
      "program": "${workspaceFolder}/server/node_modules/nyc/bin/nyc",
      "args": [
        "--reporter=text",
        "--reporter=html",
        "--report-dir",
        "./server/coverage",
        "${workspaceFolder}/server/node_modules/mocha/bin/_mocha",
        "--recursive",
        "--timeout", "0",
        "--colors",
        "--check-leaks",
        "--globals",
        "__core-js_shared__, argsIn",
        // argsIn: windows-service-controller has an undefined variable.  (I fixed in my files).
        // __core-js_shared__: When browser opens a pug page during client tests.
        "${workspaceFolder}/server/test/*.js",
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true",
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/server/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
      "preLaunchTask": "Taskkill node.exe", // kill any previously failed node runs
    },
    // Mocha database
    {
      "type": "node",
      "request": "launch",
      "name": "Mocha Database Tests",
      "protocol": "inspector",
      "runtimeExecutable":  "${workspaceFolder}/database/node_modules/node/bin/node",
      "args": [
        "${workspaceFolder}/database/node_modules/mocha/bin/_mocha",
        "--require", "ts-node/register",
        "--require", "source-map-support/register",
        "--recursive",
        "--timeout", "0",
        "--colors",
        "--check-leaks",
        "${workspaceFolder}/database/test/**/*.test.ts",
      ],
      "outFiles": [
        "${workspaceFolder}/database/dist/*.js"
      ],
      "cwd": "${workspaceFolder}/database",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true",
        // You have to use environment variables to set ts-node options */
        "TS_NODE_PROJECT": "${workspaceFolder}/database/tsconfig.json",
        "TS_NODE_FILES": "true", // include to avoid compile errors
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/database/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "smartStep": false, // false as it may skip some ts files
    },
    // Mocha database with Istanbul coverage
    // Note: Istanbul breaks breakpoint functionality
    {
      "type": "node",
      "request": "launch",
      "name": "Mocha Database with Istanbul Tests",
      "protocol": "inspector",
      "runtimeExecutable":  "${workspaceFolder}/database/node_modules/node/bin/node",
      "args": [
        "${workspaceFolder}/database/node_modules/nyc/bin/nyc",
        "${workspaceFolder}/database/node_modules/mocha/bin/_mocha",
        "--require", "ts-node/register/",
        "--require", "source-map-support/register",
        "--recursive",
        "--timeout", "0",
        "--colors",
        "--check-leaks",
        "${workspaceFolder}/database/test/**/*.test.ts",
      ],
      "outFiles": [
        "${workspaceFolder}/database/dist/**/*.js"
      ],
      "cwd": "${workspaceFolder}/database",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true",
        // You have to use environment variables to set ts-node options */
        "TS_NODE_PROJECT": "${workspaceFolder}/database/tsconfig.json",
        "TS_NODE_FILES": "true", // include to avoid compile errors
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/database/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "smartStep": false, // false as it may skip some ts files
    },
    // Mocha utils
    {
      "type": "node",
      "request": "launch",
      "name": "Mocha Utils Tests",
      "protocol": "inspector",
      "runtimeExecutable":  "${workspaceFolder}/utils/node_modules/node/bin/node",
      "args": [
        "${workspaceFolder}/utils/node_modules/mocha/bin/_mocha",
        "--require", "ts-node/register",
        "--require", "source-map-support/register",
        "--recursive",
        "--timeout", "0",
        "--colors",
        "--check-leaks",
        "${workspaceFolder}/utils/test/**/*.test.ts",
      ],
      "outFiles": [
        "${workspaceFolder}/utils/dist/*.js"
      ],
      "cwd": "${workspaceFolder}/utils",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true",
        // You have to use environment variables to set ts-node options */
        "TS_NODE_PROJECT": "${workspaceFolder}/utils/tsconfig.json",
        "TS_NODE_FILES": "true", // include to avoid compile errors
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/utils/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "smartStep": false, // false as it may skip some ts files
    },
    // Mocha utils with Istanbul coverage
    {
      "type": "node",
      "request": "launch",
      "name": "Mocha Utils with Istanbul Tests",
      "protocol": "inspector",
      "runtimeExecutable":  "${workspaceFolder}/utils/node_modules/node/bin/node",
      "args": [
        "${workspaceFolder}/utils/node_modules/nyc/bin/nyc",
        "${workspaceFolder}/utils/node_modules/mocha/bin/_mocha",
        "--require", "ts-node/register/",
        "--require", "source-map-support/register",
        "--recursive",
        "--timeout", "0",
        "--colors",
        "--check-leaks",
        "${workspaceFolder}/utils/test/**/*.test.ts",
      ],
      "outFiles": [
        "${workspaceFolder}/utils/dist/**/*.js"
      ],
      "cwd": "${workspaceFolder}/utils",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true",
        // You have to use environment variables to set ts-node options */
        "TS_NODE_PROJECT": "${workspaceFolder}/utils/tsconfig.json",
        "TS_NODE_FILES": "true", // include to avoid compile errors
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/utils/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "smartStep": false, // false as it may skip some ts files
    },
    // Current .js file
    {
      "type": "node",
      "request": "launch",
      "name": "Launch the currently opened .js file",
      "program": "${file}",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true"
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/server/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
    },
    // index.js
    {
      "type": "node",
      "request": "launch",
      "name": "Launch index.js",
      "runtimeExecutable": "node",
      "runtimeArgs": [],
      "args": [
        "${workspaceFolder}/server/dist/server/src/index.js",
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true"
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/server/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "sourceMaps": true,
      "autoAttachChildProcesses": true,
    },
    // index.ts
    {
      "type": "node",
      "request": "launch",
      "name": "Launch index.ts ",
      "runtimeExecutable": "node",
      "runtimeArgs": [
        "--require",
        "ts-node/register",
        "--require",
        "source-map-support/register",
      ],
      "cwd": "${workspaceFolder}/server",
      "args": [
        "${workspaceFolder}/server/src/index.ts"
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true",
        // You have to use environment variables to set ts-node options */
        "TS_NODE_PROJECT": "${workspaceFolder}/server/tsconfig.json",
        "TS_NODE_FILES": "true", // include to avoid compile errors
        // "TS_NODE_IGNORE_DIAGNOSTICS": "true",  // doesn't appear to have any effect
        // "TS_NODE_SKIP_IGNORE": "true",
        // "TS_NODE_PRETTY": "true",
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/server/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
    },
    // monitor.js
    {
      "type": "node",
      "request": "launch",
      "name": "Launch monitor.js",
      "runtimeExecutable": "node",
      "runtimeArgs": [],
      "args": [
        "${workspaceFolder}/server/dist/monitor/monitor.js"
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true"
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/server/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
    },
    // monitor.ts
    {
      "type": "node",
      "request": "launch",
      "name": "Launch monitor.ts ",
      "runtimeExecutable": "node",
      "runtimeArgs": [
        "--require",
        "ts-node/register",
        "--require",
        "source-map-support/register",
      ],
      "args": [
        "${workspaceFolder}/server/src/monitor/monitor.ts"
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true",
        // You have to use environment variables to set ts-node options */
        "TS_NODE_PROJECT": "${workspaceFolder}/server/tsconfig.json",
        "TS_NODE_FILES": "true", // include to avoid compile errors
        // "TS_NODE_IGNORE_DIAGNOSTICS": "true",  // doesn't appear to have any effect
        // "TS_NODE_SKIP_IGNORE": "true",
        // "TS_NODE_PRETTY": "true",
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/server/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
    },
    // database index.js (via index.ts)
    {
      "type": "node",
      "request": "launch",
      "name": "Launch database index.js (via index.ts)",
      "protocol": "inspector",
      "program": "${workspaceFolder}/database/src/index.ts",
      "cwd":  "${workspaceFolder}/database/",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true",
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/database/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "outFiles": [
        "${workspaceFolder}/database/dist/**/*.js",
        "${workspaceFolder}/utils/dist/**/*.js",
      ],
      "smartStep": false,
    },
    // database index.ts (via ts-node)
    {
      "type": "node",
      "request": "launch",
      "name": "Launch database index.ts (via ts-node)",
      "protocol": "inspector",
      "runtimeExecutable":  "${workspaceFolder}/database/node_modules/node/bin/node",
      "runtimeArgs": [
        "--require", "ts-node/register",
        "--require", "source-map-support/register",
      ],
      "args": [
        "${workspaceFolder}/database/src/index.ts"
      ],
      "cwd":  "${workspaceFolder}/database/",
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true",
        // You have to use environment variables to set ts-node options */
        "TS_NODE_PROJECT": "${workspaceFolder}/database/tsconfig.json",
        "TS_NODE_FILES": "true", // include to avoid compile errors
      },
      "outputCapture": "std",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/database/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
      "smartStep": false,  // false as it may skip some ts files
    },
    // localhost
    {
      // starts Chrome and connect to the home page
      // the server must be started in advance of running this
      "name": "Launch https://localhost:1337/",
      "type": "chrome",
      "request": "launch",
      "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
      "runtimeArgs": [
        "--incognito",
        "--start-maximized",
        "--new-window",
        "--disable-popup-blocking", // necessary for window.open() to work
      ],
      "userDataDir": true,
      "url": "https://localhost:1337/",
      // tell vscode where to find scripts on the server
      "pathMapping": {
        "/": "${workspaceFolder}/app-test-angular/dist/angular-tour-of-heroes",
        "/testServer": "${workspaceFolder}/server/test/client/browser",
      },
      "sourceMapPathOverrides": {
        "webpack:///./*": "${workspaceFolder}/app-test-angular/*",
      },
      "smartStep": true,
      "disableNetworkCache": true,
      "showAsyncStacks": true,
      "sourceMaps": true,
      "preLaunchTask": "Is Server Up?", // must delay to allow server start for use in compounds
    },
    // Client-fired server tests
    {
      /* This runs the server-side mocha client test file to test the server-side behaviour during client-side fired tests. */
      /* It expects the browser client to run a series of matching client-side tests. */
      /* If not commented out in the js fle it kicks off the browser tests */
      "type": "node",
      "request": "launch",
      "name": "Mocha Client Tests",
      "program": "${workspaceFolder}/server/node_modules/mocha/bin/_mocha",
      "args": [
        // mocha options
        "--recursive",
        "--timeout", "0",
        "--colors",
        "--globals", "__core-js_shared__, argsIn, __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault",
        // argsIn: windows-service-controller has an undefined variable.  (I fixed in my files).
        // __core-js_shared__: When browser opens a pug page during client tests.
        // Others introduced with typescript etc (?).
        "${workspaceFolder}/server/test/client-test.js",
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true",
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/server/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
      // "preLaunchTask": "Taskkill node.exe", // can't use in compound calls
    },
    // Client-fired server tests with Istanbul
    {
      /* This runs the server-side mocha client test file and istanbul coverage to test the server-side behaviour during client-side tests. */
      /* It expects the browser client to run a series of matching client-side tests. */
      /* If not commented out in the js fle it kicks off the browser tests. */
      "type": "node",
      "request": "launch",
      "name": "Mocha Client Tests with Istanbul",
      "program": "${workspaceFolder}/server/node_modules/nyc/bin/nyc",
      "args": [
        "--reporter=text",
        "--reporter=html",
        "--report-dir",
        "./server/coverage",
        "${workspaceFolder}/server/node_modules/mocha/bin/_mocha",
        // mocha options
        "--recursive",
        "--timeout", "0",
        "--colors",
        "--globals", "__core-js_shared__, argsIn, __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault",
        // argsIn: windows-service-controller has an undefined variable.  (I fixed in my files).
        // __core-js_shared__: When browser opens a pug page during client tests.
        // Others introduced with typescript etc (?).
        "${workspaceFolder}/server/test/client-test.js",
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*", // comment out to remove debug output
        "DEBUG_COLORS": "true",
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/server/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
      // "preLaunchTask": "Taskkill node.exe", // can't use in compound calls
    },
    // Browser-side tests
    {
      /* This runs client-side tests from Chrome, i.e. it loads loadmocha.html
       * which calls client-side tests.
       * The server must be started in advance of running this.
       * You can run the mocha server-side test in advance of running this to
       * also test server-side client-test functionality - see above */
      "name": "Mocha Browser Tests",
      "type": "chrome",
      "request": "launch",
      "runtimeExecutable": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
      "runtimeArgs": [
        "--incognito", // clear cache
        "--start-maximized",
        "--new-window",
        "--disable-popup-blocking", // necessary for window.open() to work
      ],
      "userDataDir": true,
      "url": "https://localhost:1337/testServer/loadmocha.html",
      // tell vscode where to find scripts on the server
      "pathMapping": {
        "/": "${workspaceFolder}/app-test-angular/dist/angular-tour-of-heroes",
        "/testServer": "${workspaceFolder}/server/test/client/browser",
      },
      /* use .scripts in debug console to check */
      "sourceMapPathOverrides": {
        "webpack:///./*": "${workspaceFolder}/app-test-angular/*",
      },
      "smartStep": true,
      "disableNetworkCache": true,
      "showAsyncStacks": true,
      "sourceMaps": true,
      "preLaunchTask": "Is Server Up?", // must delay to allow server start for use in compounds
    },
    // NPM index.js
    {
      /* Runs an npm script to start index.js.
             * Note that CTRL+C does not exit without manual intervention.
             * Click on the VSCode 'stop' icon to exit without manual intervention */
      "type": "node",
      "request": "launch",
      "name": "NPM index.js",
      "cwd": "${workspaceFolder}/server",
      "runtimeExecutable": "npm",
      "runtimeArgs": [
        "run-script",
        "index:debug",
        "--silent"
      ],
      "port": 9229,
      "outFiles": [
        "${workspaceFolder}/dist/**/*.js"
      ],
      "env": {
        "NODE_ENV": "development",
        "DEBUG": "MM* PP* SY*",
        "DEBUG_COLORS": "true"
      },
      "outputCapture": "std",
      "console": "integratedTerminal", // allows you use CTRL+C to exit
      "internalConsoleOptions": "neverOpen",
      "skipFiles": [
        "${workspaceFolder}/node_modules/**/*.js",
        "<node_internals>/**/*.js",
        "<node_internals>/**/*",
      ],
      "autoAttachChildProcesses": true,
      "sourceMaps": true,
    },
  ],
  "compounds": [
    // Server client-fired and browser-side tests together
    {
      /* NOTE: Not needed or usable if client-fired test file calls Chrome */
      /* This runs the server-side client test (which expects a client browser to fire the tests), and then calls Chrome to run the clent-side tests.
      * A task in the Moncha Browser Tests configuraton checks the server is up before running the client-side browser tests */
      "name": "Mocha Client and Browser",
      "configurations": [
          "Mocha Client Tests",
          "Mocha Browser Tests",
        ]
    }
],
}
