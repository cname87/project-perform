/**
 * Project Perform API V1
 * V1.x.x cover the API for one team
 *
 * OpenAPI spec version: 1.0.0
 * Contact: cname@yahoo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { Count } from '../model/count';
import { Member } from '../model/member';
import { MemberWithoutId } from '../model/memberWithoutId';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({
  providedIn: 'root',
})
export class MembersService {
  protected basePath = 'https://localhost:1337/api-v1';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration,
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.configuration.basePath =
        configuration.basePath || basePath || this.basePath;
    } else {
      this.configuration.basePath = basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Adds a member to a team
   * Adds a supplied member to the team.
   * A member object must be supplied in the body.
   * An error (409) will be returned if a member with the same id as the id in the supplied member object already exists.
   * @param memberWithoutId Team member detail
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addMember(
    memberWithoutId: MemberWithoutId,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<Member>;
  public addMember(
    memberWithoutId: MemberWithoutId,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<Member>>;
  public addMember(
    memberWithoutId: MemberWithoutId,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<Member>>;
  public addMember(
    memberWithoutId: MemberWithoutId,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (memberWithoutId === null || memberWithoutId === undefined) {
      throw new Error(
        'Required parameter memberWithoutId was null or undefined when calling addMember.',
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Member>(
      `${this.configuration.basePath}/members`,
      memberWithoutId,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Deletes a member from a team
   * Deletes a member from the team
   * @param id The ID of the team member
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteMember(
    id: number,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<Count>;
  public deleteMember(
    id: number,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<Count>>;
  public deleteMember(
    id: number,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<Count>>;
  public deleteMember(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling deleteMember.',
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<Count>(
      `${this.configuration.basePath}/members/${encodeURIComponent(
        String(id),
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Deletes all members of a team
   * Deletes all team members
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteMembers(
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<Count>;
  public deleteMembers(
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<Count>>;
  public deleteMembers(
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<Count>>;
  public deleteMembers(
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<Count>(
      `${this.configuration.basePath}/members`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Returns a specific team member
   * Obtain information about a specific team member
   * @param id The ID of the team member
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMember(
    id: number,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<Member>;
  public getMember(
    id: number,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<Member>>;
  public getMember(
    id: number,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<Member>>;
  public getMember(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getMember.',
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Member>(
      `${this.configuration.basePath}/members/${encodeURIComponent(
        String(id),
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Returns the members of a team
   * Returns all team members
   * @param name Pass an optional name search string to limit the returned list
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getMembers(
    name?: string,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<Array<Member>>;
  public getMembers(
    name?: string,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<Array<Member>>>;
  public getMembers(
    name?: string,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<Array<Member>>>;
  public getMembers(
    name?: string,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (name !== undefined && name !== null) {
      queryParameters = queryParameters.set('name', <any>name);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<Member>>(
      `${this.configuration.basePath}/members`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }

  /**
   * Updates a member in a team
   * Updates the data on a member of the team
   * @param member Team member to be updated detail
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateMember(
    member: Member,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<Member>;
  public updateMember(
    member: Member,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<Member>>;
  public updateMember(
    member: Member,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<Member>>;
  public updateMember(
    member: Member,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (member === null || member === undefined) {
      throw new Error(
        'Required parameter member was null or undefined when calling updateMember.',
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    const httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected !== undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<Member>(
      `${this.configuration.basePath}/members`,
      member,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    );
  }
}
